# Weathered - Technical Overview

## Project Architecture

Weathered is a top-down 2D procedural dungeon crawler built with Phaser 3, featuring a robust architecture designed with multiplayer capabilities in mind. The game employs a stage-based system where discrete areas are connected through exits, combining procedural generation with hand-crafted elements to create an expansive world.

## Core System Design

The architecture follows a modular, event-driven approach with clear separation of concerns to facilitate future multiplayer implementation:

### Game State Management

- **EventBus (`EventBus.js`)**: A central message broker that decouples game systems through a publish/subscribe pattern. All events include timestamps for potential network synchronization.

- **GameState (`GameState.js`)**: Serves as the single source of truth for the game state, tracking entities, players, stages, and the current stage. Built to support state synchronization and reconciliation for multiplayer.

- **ActionManager (`ActionManager.js`)**: Separates player intent from execution by queueing actions before processing them. This critical pattern enables:
  - Deterministic updates for multiplayer synchronization
  - Validation of actions before execution
  - Replay capabilities for state reconciliation

### Entity System

- **Entity (`Entity.js`)**: Base class for all game objects that need network synchronization, providing:
  - Unique ID generation
  - Position tracking
  - Network state serialization/deserialization
  - Lifecycle management

- **EntityManager (`EntityManager.js`)**: Centralizes entity registration, updates, and spatial queries with type-based indexing for efficient lookups.

- **Player (`Player.js`)**: Extends the Entity class with player-specific functionality, including:
  - Movement controls
  - Physics body integration
  - Camera following
  - Health tracking
  - Network state specialization

### Input Handling

- **InputManager (`InputManager.js`)**: Converts keyboard input into standardized game actions through the ActionManager, completely separating input capture from game logic execution.

## World Generation System

The world is composed of interconnected stages, each containing rooms, corridors, and exits:

### Stage Management

- **StageManager (`Stage.js`)**: Handles stage creation, transition, and rendering. It:
  - Manages physics groups for walls and exits
  - Creates the visual representation of stages
  - Handles stage transitions

- **StageGenerator (`StageGenerator.js`)**: Implements procedural generation through:
  - Room placement with a central room and satellite rooms
  - Corridor generation to ensure connectivity
  - Strategic exit placement
  - Border generation

- **ExitManager (`ExitManager.js`)**: Manages connections between stages:
  - Handles player transition between stages
  - Creates bidirectional connections
  - Ensures safe player placement after transition

## Rendering and Physics

- **GameScene (`GameScene.js`)**: The main Phaser scene that orchestrates:
  - Entity creation and registration
  - Physics setup (collisions and overlaps)
  - Fixed timestep updates (critical for deterministic multiplayer)
  - Input processing

- **Physics Implementation**: Uses Phaser's Arcade Physics for:
  - Collision detection between the player and walls
  - Overlap detection for exits
  - Movement with proper velocities

## Technical Components

### Tile-Based Approach

The game uses a tile-based system with three primary tile types:
- **Solid tiles (1)**: Black rectangles for walls and boundaries
- **Empty tiles (0)**: Light gray rectangles for traversable floor space
- **Exit tiles (2)**: Blue rectangles for stage transitions

### Procedural Generation Algorithm

The level generation follows a structured approach:
1. Initialize with solid tiles
2. Create a central room
3. Generate 5-9 additional random rooms
4. Connect all rooms to the central room with horizontal and vertical corridors
5. Ensure solid boundaries around the perimeter
6. Strategically place 1-2 exits near edges or walls

### Fixed Timestep Loop

The update loop implements a fixed timestep pattern for deterministic physics and game logic:
- Variable framerate rendering with accumulator for smooth visuals
- Fixed-rate updates for consistent game logic
- Potential for interpolation between physics steps

## Multiplayer Readiness

Although currently implemented as single-player, the architecture has been designed with multiplayer in mind:

### Network Synchronization Foundations

- All entities have unique IDs and serializable state
- Actions are queued and processed deterministically
- Events include timestamps for network ordering
- Entity positions are tracked separately from visual representation

### Potential Client-Server Implementation

The codebase supports a client-server model where:
- Client captures input and sends actions
- Server validates actions and updates authoritative state
- State changes are broadcast to all clients
- Clients reconcile their local state with server updates

## Current Limitations and Future Work

- **Combat System**: Foundations are in place, but combat mechanics are not yet implemented
- **Enemy AI**: Structure for enemies exists, but no concrete implementations yet
- **Character Stats**: Placeholder for health exists, but full RPG stat system not implemented
- **Item and Inventory**: Not yet implemented
- **Quest System**: Not yet implemented

## Extension Points

The architecture supports extension in several ways:
- **Entity Types**: New entity classes can easily extend the base Entity class
- **Action Types**: New actions can be registered with the ActionManager
- **Tile Types**: Additional tile types can be added to the stage generation
- **Stage Generation**: More sophisticated algorithms can replace the current implementation

## Technical Considerations

- **Memory Management**: Stages are generated once and cached for revisits
- **Performance Optimization**: Only visible tiles have display objects
- **Coordinate Systems**: The code maintains tile coordinates, pixel coordinates, and exit indices

## Development Environment

- **Engine**: Phaser 3 with Arcade Physics
- **Rendering**: Canvas/WebGL (auto-detected by Phaser)
- **Scaling**: Responsive design with window resize handling